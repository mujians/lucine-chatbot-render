generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Sessioni chat
model ChatSession {
  id            String    @id @default(uuid())
  sessionId     String    @unique
  userIp        String?
  userAgent     String?
  startedAt     DateTime  @default(now())
  lastActivity  DateTime  @updatedAt
  status        SessionStatus @default(ACTIVE)
  
  // Relations
  messages      Message[]
  tickets       Ticket[]
  operatorChats OperatorChat[]
  queueEntries  QueueEntry[]
  internalNotes InternalNote[]
  
  @@index([status, lastActivity])
  @@index([sessionId])
  @@index([status])
  @@index([lastActivity])
}

// Messaggi chat
model Message {
  id          String    @id @default(uuid())
  sessionId   String
  sender      SenderType
  message     String
  metadata    Json?     // Per salvare actions, escalation, etc
  timestamp   DateTime  @default(now())
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [sessionId])

  @@index([sessionId, timestamp])
  @@index([sender])
  @@index([timestamp])  // For sorting/filtering by time
}

// Sistema ticket
model Ticket {
  id            String    @id @default(uuid())
  ticketNumber  String    @unique @default(cuid())
  sessionId     String?
  status        TicketStatus @default(OPEN)
  priority      Priority     @default(MEDIUM)

  // Contact info
  userEmail     String?
  userPhone     String?
  contactMethod ContactMethod

  // Content
  subject       String
  description   String

  // Resume chat link
  resumeToken   String?   @unique @default(cuid())  // Token per riprendere la chat
  resumeUrl     String?                              // URL completo da inviare all'utente

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resolvedAt    DateTime?

  // Relations
  session       ChatSession? @relation(fields: [sessionId], references: [sessionId])
  assignedTo    Operator?    @relation(fields: [operatorId], references: [id])
  operatorId    String?
  notes         TicketNote[]

  @@index([status, priority])
  @@index([ticketNumber])
  @@index([createdAt])
  @@index([resumeToken])
}

// Note sui ticket
model TicketNote {
  id        String   @id @default(uuid())
  ticketId  String
  note      String
  isPublic  Boolean  @default(false)
  createdBy String?
  createdAt DateTime @default(now())
  
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  
  @@index([ticketId])
}

// Operatori
model Operator {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  name          String
  displayName   String?
  avatar        String?   // URL or emoji
  specialization String?
  role          String    @default("OPERATOR") // ADMIN or OPERATOR
  passwordHash  String
  isActive      Boolean   @default(true)
  isOnline      Boolean   @default(false)
  lastSeen      DateTime?
  createdAt     DateTime  @default(now())

  // Relations
  tickets              Ticket[]
  chats                OperatorChat[]
  queueEntries         QueueEntry[]
  internalNotes        InternalNote[]
  slaResponseRecords   SLARecord[] @relation("SLAResponseOperator")
  slaResolutionRecords SLARecord[] @relation("SLAResolutionOperator")

  @@index([isOnline, isActive])
  @@index([username])
  @@index([isActive])
  @@index([role])
  @@index([lastSeen])
}

// Gestione Coda
model QueueEntry {
  id                   String    @id @default(uuid())
  sessionId            String    @unique
  priority             Priority  @default(MEDIUM)
  requiredSkills       String[]
  status               QueueStatus @default(WAITING)
  enteredAt            DateTime  @default(now())
  assignedAt           DateTime?
  cancelledAt          DateTime?
  assignedTo           String?
  cancelReason         String?
  estimatedWaitTime    Int       // in minutes
  slaWarningNotified   Boolean   @default(false)
  slaViolationNotified Boolean   @default(false)
  
  // Relations
  session              ChatSession @relation(fields: [sessionId], references: [sessionId])
  operator             Operator?   @relation(fields: [assignedTo], references: [id])
  
  @@index([status, priority, enteredAt])
  @@index([enteredAt])
  @@index([assignedTo])
}

// Chat live operatore
model OperatorChat {
  id          String    @id @default(uuid())
  sessionId   String
  operatorId  String
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  rating      Int?      // 1-5 stelle
  notes       String?
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [sessionId])
  operator    Operator    @relation(fields: [operatorId], references: [id])
  
  @@index([sessionId, operatorId])
  @@index([startedAt])
  @@index([operatorId])
  @@index([endedAt])
}

// Analytics
model Analytics {
  id              String   @id @default(uuid())
  eventType       String
  eventData       Json
  sessionId       String?
  timestamp       DateTime @default(now())
  
  // Metriche comuni
  responseTime    Int?     // in ms
  intentDetected  String?
  successful      Boolean?
  
  @@index([eventType, timestamp])
  @@index([sessionId])
}

// Knowledge Base removed - using JSON file instead (data/knowledge-base.json)

model InternalNote {
  id          String   @id @default(uuid())
  content     String
  operatorId  String
  sessionId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations  
  operator    Operator      @relation(fields: [operatorId], references: [id])
  session     ChatSession   @relation(fields: [sessionId], references: [sessionId])
  
  @@index([sessionId])
  @@index([operatorId])
  @@index([createdAt])
}

// Enums
enum SessionStatus {
  ACTIVE
  IDLE
  ENDED
  WITH_OPERATOR
  WAITING_OPERATOR
  RESOLVED
  NOT_RESOLVED
  WAITING_CLIENT
  CANCELLED
  REQUESTING_TICKET
}

enum SenderType {
  USER
  BOT
  OPERATOR
  SYSTEM
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  RESOLVED
  CLOSED
  ESCALATED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactMethod {
  EMAIL
  PHONE
  WHATSAPP
  CHAT
}

enum QueueStatus {
  WAITING
  ASSIGNED
  CANCELLED
  TIMEOUT
}

// SLA Records
model SLARecord {
  id                    String    @id @default(uuid())
  entityId              String
  entityType            String
  priority              Priority  @default(MEDIUM)
  category              String    @default("GENERAL")
  createdAt             DateTime  @default(now())
  responseDeadline      DateTime
  resolutionDeadline    DateTime
  // warningThreshold      DateTime?  // COMMENTED OUT - column doesn't exist in production DB

  // Response tracking
  firstResponseAt       DateTime?
  firstResponseTime     Int?      // in seconds
  responseOperatorId    String?
  responseOnTime        Boolean?

  // Resolution tracking
  resolvedAt            DateTime?
  totalResolutionTime   Int?      // in seconds
  resolutionOperatorId  String?
  resolutionOnTime      Boolean?
  resolutionType        String?   // RESOLVED, ESCALATED, CLOSED, etc.

  // Status tracking
  status                SLAStatus @default(ACTIVE)
  violatedAt            DateTime?
  escalatedAt           DateTime?

  // Relations
  responseOperator      Operator? @relation("SLAResponseOperator", fields: [responseOperatorId], references: [id])
  resolutionOperator    Operator? @relation("SLAResolutionOperator", fields: [resolutionOperatorId], references: [id])

  @@index([entityId, entityType])
  @@index([status, responseDeadline])
  @@index([status, resolutionDeadline])
  @@index([category])
  @@index([responseOperatorId])
  @@index([resolutionOperatorId])
}

enum SLAStatus {
  ACTIVE
  RESPONSE_MET
  RESOLUTION_MET
  VIOLATED
  ESCALATED
}

// Testi automatici configurabili
model AutomatedText {
  id          String   @id @default(uuid())
  key         String   @unique  // Es: "operator_greeting", "queue_message", "ticket_created", etc.
  label       String              // Nome descrittivo mostrato in dashboard
  text        String   @db.Text  // Il testo effettivo
  description String?             // Spiegazione del contesto d'uso
  category    String   @default("general")  // Categoria: "operator", "queue", "ticket", "closure", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([category, isActive])
}